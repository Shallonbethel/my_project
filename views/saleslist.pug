doctype html
html
  head
    title Sales List - KGL
    meta(charset='UTF-8')
    meta(name='viewport', content='width=device-width, initial-scale=1.0')
    link(rel='stylesheet', href='https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css')
    link(rel='stylesheet', href='/css/sales.css')
  body
    // Top Navbar
    nav.navbar.navbar-expand-lg.navbar-dark()
      .container-fluid
        a.navbar-brand(href='/') KGL System
        button.navbar-toggler(type='button', data-bs-toggle='collapse', data-bs-target='#navbarNav')
          span.navbar-toggler-icon
        #navbarNav.collapse.navbar-collapse
          ul.navbar-nav.ms-auto
            li.nav-item
              a.nav-link(href='/creditSaleList') Credits
            li.nav-item
              a.nav-link(href='/procurementList') Procurement
            li.nav-item
              a.nav-link(href='/sell/saleslist') Sales
            li.nav-item
              a.nav-link(href='/signupList') Users
            li.nav-item
              a.nav-link(href='/index') Logout

    .container-fluid
      .row
        // Sidebar
        .col-md-2.sidebar
          ul.nav.flex-column
            if user
              li.nav-item
                a.nav-link(href=user.role === 'director' ? '/dashboard' : user.role === 'manager' ? '/manager-dashboard' : '/salesAgentDashboard') Dashboard
            li.nav-item
              a.nav-link(href='/add') Add Credit
            li.nav-item
              a.nav-link(href='/procure') Add Procurement
            li.nav-item
              a.nav-link(href='/sell') Add Sale
            li.nav-item
              a.nav-link(href='/signup') Add User

        // Main Content
        .col-md-10.main-content
          .container.mt-4
            h2.mb-4 Sales List
            if error
              .alert.alert-danger= error
            if success
              .alert.alert-success= success
            .card.shadow
              .card-body
                table.table.table-striped
                  thead
                    tr
                      th Produce Name
                      th Tonnage (kg)
                      th Amount Paid (UGX)
                      th Buyer Name
                      th Sales Agent
                      th Date
                      th Time
                      th Actions
                  tbody
                    each sale in sales
                      tr
                        td= sale.produceName
                        td= sale.tonnage
                        td= sale.amountPaid.toLocaleString()
                        td= sale.buyerName
                        td= sale.salesAgentName
                        td= new Date(sale.date).toLocaleDateString()
                        td= sale.time
                        td
                          .btn-group
                            button.btn.btn-sm.btn-primary(onclick=`editSale('${sale._id}')`) Edit
                            button.btn.btn-sm.btn-danger(onclick=`deleteSale('${sale._id}')`) Delete

    // Delete Confirmation Modal
    #deleteModal.modal.fade(tabindex='-1')
      .modal-dialog
        .modal-content
          .modal-header
            h5.modal-title Confirm Delete
            button.btn-close(type='button', data-bs-dismiss='modal')
          .modal-body
            p Are you sure you want to delete this sale?
          .modal-footer
            button.btn.btn-secondary(type='button', data-bs-dismiss='modal') Cancel
            button#confirmDelete.btn.btn-danger(type='button') Delete

    // Edit Sale Modal
    #editModal.modal.fade(tabindex='-1')
      .modal-dialog
        .modal-content
          .modal-header
            h5.modal-title Edit Sale
            button.btn-close(type='button', data-bs-dismiss='modal')
          .modal-body
            form#editSaleForm
              input#saleId(type='hidden')
              .mb-3
                label.form-label(for='editProduceName') Produce Name
                input#editProduceName.form-control(type='text', required)
              .mb-3
                label.form-label(for='editTonnage') Tonnage (kg)
                input#editTonnage.form-control(type='number', step='0.01', required)
              .mb-3
                label.form-label(for='editAmountPaid') Amount Paid (UGX)
                input#editAmountPaid.form-control(type='number', required)
              .mb-3
                label.form-label(for='editBuyerName') Buyer Name
                input#editBuyerName.form-control(type='text', required)
              .mb-3
                label.form-label(for='editDate') Date
                input#editDate.form-control(type='date', required)
              .mb-3
                label.form-label(for='editTime') Time
                input#editTime.form-control(type='time', required)
          .modal-footer
            button.btn.btn-secondary(type='button', data-bs-dismiss='modal') Cancel
            button#saveEdit.btn.btn-primary(type='button') Save Changes

    script(src='https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js')
    script.
      let deleteModal;
      let editModal;
      let saleToDelete = null;

      document.addEventListener('DOMContentLoaded', () => {
        deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
        editModal = new bootstrap.Modal(document.getElementById('editModal'));
      });

      async function deleteSale(id) {
        saleToDelete = id;
        deleteModal.show();
      }

      document.getElementById('confirmDelete').addEventListener('click', async () => {
        if (!saleToDelete) return;
        
        try {
          const response = await fetch(`/sell/${saleToDelete}`, {
            method: 'DELETE'
          });
          
          if (response.ok) {
            window.location.reload();
          } else {
            const data = await response.json();
            alert(data.error || 'Failed to delete sale');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Failed to delete sale');
        }
        
        deleteModal.hide();
        saleToDelete = null;
      });

      async function editSale(id) {
        try {
          const response = await fetch(`/sell/${id}`);
          const sale = await response.json();
          
          if (response.ok) {
            document.getElementById('saleId').value = sale._id;
            document.getElementById('editProduceName').value = sale.produceName;
            document.getElementById('editTonnage').value = sale.tonnage;
            document.getElementById('editAmountPaid').value = sale.amountPaid;
            document.getElementById('editBuyerName').value = sale.buyerName;
            document.getElementById('editDate').value = new Date(sale.date).toISOString().split('T')[0];
            document.getElementById('editTime').value = sale.time;
            
            editModal.show();
          } else {
            alert('Failed to load sale details');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Failed to load sale details');
        }
      }

      document.getElementById('saveEdit').addEventListener('click', async () => {
        const form = document.getElementById('editSaleForm');
        const formData = new FormData(form);
        const saleId = document.getElementById('saleId').value;
        
        try {
          const response = await fetch(`/sell/${saleId}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              produceName: formData.get('editProduceName'),
              tonnage: formData.get('editTonnage'),
              amountPaid: formData.get('editAmountPaid'),
              buyerName: formData.get('editBuyerName'),
              date: formData.get('editDate'),
              time: formData.get('editTime')
            })
          });
          
          if (response.ok) {
            window.location.reload();
          } else {
            const data = await response.json();
            alert(data.error || 'Failed to update sale');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Failed to update sale');
        }
        
        editModal.hide();
      });
